datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  fullName      String
  email         String    @unique
  loginId       String    @unique
  passwordHash  String
  role          Role
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions      Session[]
  createdMOs    ManufacturingOrder[] @relation("CreatedBy")
  assignedMOs   ManufacturingOrder[] @relation("AssignedTo")
  assignedWOs   WorkOrder[]          @relation("WOAssigned")
  reports       Report[]
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  manager
  inventory_manager
  operator
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  unit        String    @default("unit")
  createdAt   DateTime  @default(now())

  bomProducts   BillOfMaterial[] @relation("Product")
  manufacturingOrders ManufacturingOrder[]
  productLedger ProductLedger[]

  // Backrelation for ProductStock
  productStock ProductStock?
}

model ProductStock {
  id        Int       @id @default(autoincrement())
  productId Int       @unique
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Float     @default(0)
  updatedAt DateTime  @updatedAt
}

model Material {
  id          Int       @id @default(autoincrement())
  name        String
  unit        String    @default("unit")
  createdAt   DateTime  @default(now())

  bomComponents BillOfMaterial[] @relation("Component")
  materialLedger MaterialLedger[]

  // Backrelation for MaterialStock
  materialStock MaterialStock?
}

model MaterialStock {
  id        Int       @id @default(autoincrement())
  materialId Int      @unique
  material  Material   @relation(fields: [materialId], references: [id])
  quantity  Float     @default(0)
  updatedAt DateTime  @updatedAt
}


model BillOfMaterial {
  id               Int     @id @default(autoincrement())
  quantity         Float
  operation        String?
  estimatedTimeMins Int?

  productId   Int
  product     Product @relation("Product", fields: [productId], references: [id], onDelete: Cascade)

  componentId Int
  component   Material @relation("Component", fields: [componentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ManufacturingOrder {
  id          Int       @id @default(autoincrement())
  quantity    Int
  scheduleStartDate DateTime?
  deadline    DateTime?
  status      OrderStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdById Int
  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])

  assignedToId Int?
  assignedTo   User? @relation("AssignedTo", fields: [assignedToId], references: [id])

  workOrders WorkOrder[]
}

enum OrderStatus {
  draft
  confirmed
  in_progress
  to_close
  done
  cancelled
}

model WorkOrder {
  id          Int       @id @default(autoincrement())
  operation   String
  status      WorkStatus
  comments    String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())

  moId Int
  mo   ManufacturingOrder @relation(fields: [moId], references: [id], onDelete: Cascade)

  workCenterId Int?
  workCenter   WorkCenter? @relation(fields: [workCenterId], references: [id])

  assignedToId Int?
  assignedTo   User? @relation("WOAssigned", fields: [assignedToId], references: [id])
}

enum WorkStatus {
  to_do
  started
  paused
  completed
}

model WorkCenter {
  id             Int       @id @default(autoincrement())
  name           String
  location       String?
  capacityPerHour Float?
  costPerHour    Float?
  downtimeMins   Int       @default(0)
  createdAt      DateTime  @default(now())

  workOrders WorkOrder[]
}

/// ---------------- PRODUCT LEDGER ----------------
model ProductLedger {
  id           Int          @id @default(autoincrement())
  movementType MovementType
  quantity     Float
  referenceType String?     // e.g., "MO", "WO", "purchase"
  referenceId   Int?
  createdAt    DateTime     @default(now())

  productId    Int
  product      Product      @relation(fields: [productId], references: [id])
}

/// ---------------- MATERIAL LEDGER ----------------
model MaterialLedger {
  id           Int          @id @default(autoincrement())
  movementType MovementType
  quantity     Float
  referenceType String?     // e.g., "MO", "WO", "purchase"
  referenceId   Int?
  createdAt    DateTime     @default(now())

  materialId   Int
  material     Material    @relation(fields: [materialId], references: [id])
}

enum MovementType {
  in
  out
}

/// ---------------- CURRENT STOCK (CACHED) ----------------


model Report {
  id          Int       @id @default(autoincrement())
  reportType  String
  data        Json
  generatedAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// datasource db {
//   provider = "postgresql"
//   url      = env("POSTGRES_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id            Int       @id @default(autoincrement())
//   fullName      String
//   email         String    @unique
//   loginId       String    @unique
//   passwordHash  String
//   role          Role
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt

//   sessions      Session[]
//   createdMOs    ManufacturingOrder[] @relation("CreatedBy")
//   assignedMOs   ManufacturingOrder[] @relation("AssignedTo")
//   assignedWOs   WorkOrder[]          @relation("WOAssigned")
//   createdLedger StockLedger[]
//   reports       Report[]
// }

// model Session {
//   id        Int      @id @default(autoincrement())
//   token     String
//   expiresAt DateTime
//   createdAt DateTime @default(now())

//   userId Int
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// enum Role {
//   admin
//   manager
//   inventory_manager
//   operator
// }

// model Product {
//   id          Int       @id @default(autoincrement())
//   name        String
//   description String?
//   unit        String    @default("unit")
//   createdAt   DateTime  @default(now())

//   bomProducts   BillOfMaterial[] @relation("Product")
//   manufacturingOrders ManufacturingOrder[]
//   productLedger ProductLedger[]
// }

// model Material {
//   id          Int       @id @default(autoincrement())
//   name        String
//   unit        String    @default("unit")
//   createdAt   DateTime  @default(now())

//   bomComponents BillOfMaterial[] @relation("Component")
//   materialLedger MaterialLedger[]
// }


// model BillOfMaterial {
//   id               Int     @id @default(autoincrement())
//   quantity         Float
//   operation        String?
//   estimatedTimeMins Int?

//   productId   Int
//   product     Product @relation("Product", fields: [productId], references: [id], onDelete: Cascade)

//   componentId Int
//   component   Product @relation("Component", fields: [componentId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
// }

// model ManufacturingOrder {
//   id          Int       @id @default(autoincrement())
//   quantity    Int
//   scheduleStartDate DateTime?
//   deadline    DateTime?
//   status      OrderStatus
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   productId Int
//   product   Product @relation(fields: [productId], references: [id])

//   createdById Int
//   createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])

//   assignedToId Int?
//   assignedTo   User? @relation("AssignedTo", fields: [assignedToId], references: [id])

//   workOrders WorkOrder[]
// }

// enum OrderStatus {
//   draft
//   confirmed
//   in_progress
//   to_close
//   done
//   cancelled
// }

// model WorkOrder {
//   id          Int       @id @default(autoincrement())
//   operation   String
//   status      WorkStatus
//   comments    String?
//   startedAt   DateTime?
//   completedAt DateTime?
//   createdAt   DateTime @default(now())

//   moId Int
//   mo   ManufacturingOrder @relation(fields: [moId], references: [id], onDelete: Cascade)

//   workCenterId Int?
//   workCenter   WorkCenter? @relation(fields: [workCenterId], references: [id])

//   assignedToId Int?
//   assignedTo   User? @relation("WOAssigned", fields: [assignedToId], references: [id])
// }

// enum WorkStatus {
//   to_do
//   started
//   paused
//   completed
// }



// model WorkCenter {
//   id             Int       @id @default(autoincrement())
//   name           String
//   location       String?
//   capacityPerHour Float?
//   costPerHour    Float?
//   downtimeMins   Int       @default(0)
//   createdAt      DateTime  @default(now())

//   workOrders WorkOrder[]
// }

// // model StockLedger {
// //   id           Int       @id @default(autoincrement())
// //   movementType MovementType
// //   quantity     Float
// //   referenceType String?
// //   referenceId   Int?
// //   createdAt    DateTime @default(now())

// //   productId Int
// //   product   Product @relation(fields: [productId], references: [id])

// //   createdById Int
// //   createdBy   User @relation(fields: [createdById], references: [id])
// // }

// // enum MovementType {
// //   in
// //   out
// // }

// /// ---------------- STOCK LEDGER ----------------
// /// ---------------- PRODUCT LEDGER ----------------
// model ProductLedger {
//   id           Int          @id @default(autoincrement())
//   movementType MovementType
//   quantity     Float
//   referenceType String?     // e.g., "MO", "WO", "purchase"
//   referenceId   Int?
//   createdAt    DateTime     @default(now())

//   productId    Int
//   product      Product      @relation(fields: [productId], references: [id])

//   createdById  Int
//   createdBy    User @relation(fields: [createdById], references: [id])
// }

// /// ---------------- MATERIAL LEDGER ----------------
// model MaterialLedger {
//   id           Int          @id @default(autoincrement())
//   movementType MovementType
//   quantity     Float
//   referenceType String?     // e.g., "MO", "WO", "purchase"
//   referenceId   Int?
//   createdAt    DateTime     @default(now())

//   materialId   Int
//   material     Product      @relation(fields: [materialId], references: [id]) // component is Product
//   createdById  Int
//   createdBy    User @relation(fields: [createdById], references: [id])
// }
// enum MovementType {
//   in
//   out
// }

// enum ItemType {
//   product
//   material
// }
// /// ---------------- CURRENT STOCK (CACHED) ----------------
// model ProductStock {
//   id        Int       @id @default(autoincrement())
//   productId Int       @unique
//   product   Product   @relation(fields: [productId], references: [id])
//   quantity  Float     @default(0)
//   updatedAt DateTime  @updatedAt
// }

// model MaterialStock {
//   id        Int       @id @default(autoincrement())
//   materialId Int      @unique
//   material  Product   @relation(fields: [materialId], references: [id])
//   quantity  Float     @default(0)
//   updatedAt DateTime  @updatedAt
// }


// model Report {
//   id          Int       @id @default(autoincrement())
//   reportType  String
//   data        Json
//   generatedAt DateTime @default(now())

//   userId Int
//   user   User @relation(fields: [userId], references: [id])
// }
