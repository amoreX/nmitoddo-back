datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String    
  name          String?   
  loginId       String?   @unique // Made optional to support email-only login
  role          Role      @default(user)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions      Session[]
  createdMOs    ManufacturingOrder[] @relation("CreatedBy")
  assignedMOs   ManufacturingOrder[] @relation("AssignedTo")
  assignedWOs   WorkOrder[]          @relation("WOAssigned")
  reports       Report[]
  workCenters  WorkCenter[] 
  moPresets    MOPresets[]          @relation("MOPresetsCreatedBy") 
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  admin
  manager
  user
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  unit        String    @default("unit")
  createdAt   DateTime  @default(now())

  // BOM: components for this product
  bom          BillOfMaterial[] @relation("ProductBOM") // finished product -> BOM entries

  // Products where this product is used as component
  usedInBOM    BillOfMaterial[] @relation("ComponentBOM") // this product is component in BOMs

  manufacturingOrders ManufacturingOrder[]
  productLedger       ProductLedger[]
  moPresets           MOPresets[]

  // Stock
  stock ProductStock?
}

model MOPresets {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  quantity    Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  productId   Int
  product     Product   @relation(fields: [productId], references: [id])
  
  createdById Int
  createdBy   User      @relation("MOPresetsCreatedBy", fields: [createdById], references: [id])
}

model BillOfMaterial {
  id             Int      @id @default(autoincrement())
  productId      Int
  product        Product  @relation("ProductBOM", fields: [productId], references: [id], onDelete: Cascade)
  operation      String?  
  opDurationMins Int?
  componentId    Int
  component      Product  @relation("ComponentBOM", fields: [componentId], references: [id], onDelete: Cascade)
  quantity       Float
  createdAt      DateTime @default(now())
}

model ManufacturingOrder {
  id          Int       @id @default(autoincrement())
  quantity    Int?
  scheduleStartDate DateTime?
  deadline    DateTime?
  status      OrderStatus
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
  
  createdById Int
  createdBy   User @relation("CreatedBy", fields: [createdById], references: [id])

  assignedToId Int?
  assignedTo   User? @relation("AssignedTo", fields: [assignedToId], references: [id])

  workOrders WorkOrder[]
}

enum OrderStatus {
  draft
  confirmed
  in_progress
  to_close
  done
  cancelled
}

model WorkOrder {
  id          Int       @id @default(autoincrement())
  operation   String
  status      WorkStatus
  comments    String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  durationMins Int
  durationDoneMins Int @default(0)

  moId Int
  mo   ManufacturingOrder @relation(fields: [moId], references: [id], onDelete: Cascade)

  workCenterId Int?
  workCenter   WorkCenter? @relation(fields: [workCenterId], references: [id])

  assignedToId Int?
  assignedTo   User? @relation("WOAssigned", fields: [assignedToId], references: [id])
}

enum WorkStatus {
  to_do
  started
  paused
  completed
}

model WorkCenter {
  id             Int       @id @default(autoincrement())
  name           String
  location       String?
  capacityPerHour Float?
  costPerHour    Float?
  downtimeMins   Int       @default(0)
  createdAt      DateTime  @default(now())
  createdById   Int
  createdBy     User      @relation(fields: [createdById], references: [id])
  workOrders WorkOrder[]
}

/// ---------------- PRODUCT LEDGER ----------------
model ProductLedger {
  id           Int          @id @default(autoincrement())
  movementType MovementType
  quantity     Float
  referenceType String?     // e.g., "MO", "WO", "purchase"
  referenceId   Int?
  createdAt    DateTime     @default(now())

  productId    Int
  product      Product      @relation(fields: [productId], references: [id])
}

enum MovementType {
  in
  out
}

/// ---------------- CURRENT STOCK (CACHED) ----------------
model ProductStock {
  id        Int       @id @default(autoincrement())
  productId Int       @unique
  product   Product   @relation(fields: [productId], references: [id])
  quantity  Float     @default(0)
  updatedAt DateTime  @updatedAt
}

model Report {
  id          Int       @id @default(autoincrement())
  reportType  String
  data        Json
  generatedAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id])
}
